
import { supabase } from "@/integrations/supabase/client";
import type { StaffMember } from "@/types/staff";
import type { DatabaseStaffMember } from "../types/databaseTypes";

export const fetchStaffMembers = async () => {
  try {
    // First, attempt to create table if it doesn't exist
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS staff_members (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name TEXT NOT NULL,
        role TEXT NOT NULL,
        email TEXT,
        phone TEXT,
        status TEXT NOT NULL DEFAULT 'active',
        salary NUMERIC,
        shift TEXT,
        department TEXT,
        certifications TEXT[],
        performance_rating NUMERIC DEFAULT 0,
        address TEXT,
        schedule JSONB,
        bank_info JSONB,
        emergency_contact JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
      );

      -- Enable Row Level Security
      ALTER TABLE staff_members ENABLE ROW LEVEL SECURITY;

      -- Create policies
      DO $$ 
      BEGIN
        IF NOT EXISTS (
          SELECT FROM pg_policies WHERE tablename = 'staff_members' AND policyname = 'Enable read access for authenticated users'
        ) THEN
          CREATE POLICY "Enable read access for authenticated users" 
            ON staff_members FOR SELECT 
            USING (auth.role() = 'authenticated');
        END IF;

        IF NOT EXISTS (
          SELECT FROM pg_policies WHERE tablename = 'staff_members' AND policyname = 'Enable insert for authenticated users'
        ) THEN
          CREATE POLICY "Enable insert for authenticated users" 
            ON staff_members FOR INSERT 
            WITH CHECK (auth.role() = 'authenticated');
        END IF;

        IF NOT EXISTS (
          SELECT FROM pg_policies WHERE tablename = 'staff_members' AND policyname = 'Enable update for authenticated users'
        ) THEN
          CREATE POLICY "Enable update for authenticated users" 
            ON staff_members FOR UPDATE
            USING (auth.role() = 'authenticated');
        END IF;
      END $$;
    `;

    // Execute the create table SQL
    const { error: createError } = await supabase.rpc('exec_sql', { sql: createTableSQL });
    if (createError && !createError.message.includes('already exists')) {
      console.error('Error creating table:', createError);
    }

    // Now fetch all staff members
    const { data: staffData, error: fetchError } = await supabase
      .from('staff_members')
      .select('*')
      .order('id', { ascending: true });

    if (fetchError) {
      console.error('Error fetching staff:', fetchError);
      return [];
    }

    return (staffData || []) as DatabaseStaffMember[];
  } catch (error) {
    console.error('Error in fetchStaffMembers:', error);
    return [];
  }
};

export const createStaffMember = async (data: Omit<StaffMember, "id" | "status">) => {
  try {
    const staffData = {
      name: data.name,
      role: data.role,
      email: data.email || '',
      phone: data.phone || '',
      status: 'active' as const,
      salary: data.salary || 0,
      department: data.department || '',
      certifications: data.certifications || [],
      schedule: data.schedule || {
        monday: "OFF",
        tuesday: "OFF",
        wednesday: "OFF",
        thursday: "OFF",
        friday: "OFF",
        saturday: "OFF",
        sunday: "OFF"
      },
      bank_info: {
        accountNumber: data.bankInfo?.accountNumber || '',
        routingNumber: data.bankInfo?.routingNumber || '',
        accountType: data.bankInfo?.accountType || 'checking'
      },
      performance_rating: 0,
      shift: data.shift || 'day',
      address: data.address || '',
      emergency_contact: data.emergencyContact || {
        name: '',
        phone: '',
        relationship: ''
      }
    };

    const { data: newStaff, error } = await supabase
      .from('staff_members')
      .insert([staffData])
      .select()
      .single();

    if (error) {
      console.error('Error creating staff member:', error);
      throw error;
    }

    if (!newStaff) {
      throw new Error('No staff member returned from creation');
    }

    return newStaff as DatabaseStaffMember;
  } catch (error) {
    console.error('Error in createStaffMember:', error);
    throw error;
  }
};

export const updateStaffMemberStatus = async (staffId: number, newStatus: StaffMember["status"]) => {
  const { error } = await supabase
    .from('staff_members')
    .update({ status: newStatus })
    .eq('id', staffId);

  if (error) {
    console.error('Error updating staff status:', error);
    throw error;
  }
};

export const updateStaffMemberInfo = async (staffId: number, updates: Partial<DatabaseStaffMember>) => {
  const { error } = await supabase
    .from('staff_members')
    .update(updates)
    .eq('id', staffId);

  if (error) {
    console.error('Error updating staff info:', error);
    throw error;
  }
};

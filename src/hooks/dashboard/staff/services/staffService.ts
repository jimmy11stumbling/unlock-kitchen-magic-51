
import { supabase } from "@/integrations/supabase/client";
import type { StaffMember } from "@/types/staff";
import type { DatabaseStaffMember } from "../types/databaseTypes";

export const fetchStaffMembers = async () => {
  try {
    // First, check if table exists, if not create it
    const { error: tableError } = await supabase.rpc('check_and_create_staff_table');
    if (tableError) {
      console.error('Error checking/creating table:', tableError);
      // If RPC fails, fall back to initial staff data
      return [];
    }

    const { data, error } = await supabase
      .from('staff_members')
      .select('*')
      .order('id', { ascending: true });

    if (error) {
      console.error('Error fetching staff:', error);
      return [];
    }

    return data as DatabaseStaffMember[];
  } catch (error) {
    console.error('Error in fetchStaffMembers:', error);
    return [];
  }
};

export const createStaffMember = async (data: Omit<StaffMember, "id" | "status">) => {
  const { data: newStaff, error } = await supabase
    .from('staff_members')
    .insert({
      name: data.name,
      role: data.role,
      email: data.email,
      phone: data.phone,
      status: 'active', // Default status for new staff
      salary: data.salary,
      department: data.department,
      certifications: data.certifications,
      schedule: data.schedule,
      bank_info: data.bankInfo,
      performance_rating: 0, // Default rating for new staff
      shift: data.shift || 'day',
      address: data.address || '',
      emergency_contact: data.emergencyContact || null
    })
    .select()
    .single();

  if (error) {
    console.error('Error creating staff member:', error);
    throw error;
  }

  return newStaff as DatabaseStaffMember;
};

export const updateStaffMemberStatus = async (staffId: number, newStatus: StaffMember["status"]) => {
  const { error } = await supabase
    .from('staff_members')
    .update({ status: newStatus })
    .eq('id', staffId);

  if (error) {
    console.error('Error updating staff status:', error);
    throw error;
  }
};

export const updateStaffMemberInfo = async (staffId: number, updates: Partial<DatabaseStaffMember>) => {
  const { error } = await supabase
    .from('staff_members')
    .update(updates)
    .eq('id', staffId);

  if (error) {
    console.error('Error updating staff info:', error);
    throw error;
  }
};

// Add SQL function to create table if it doesn't exist
const createTableFunction = async () => {
  const functionSQL = `
    create or replace function check_and_create_staff_table()
    returns void
    language plpgsql
    security definer
    as $$
    begin
      if not exists (select from pg_tables where schemaname = 'public' and tablename = 'staff_members') then
        create table public.staff_members (
          id bigint generated by default as identity primary key,
          name text not null,
          role text not null,
          email text,
          phone text,
          status text not null default 'active',
          salary numeric,
          department text,
          certifications text[],
          schedule jsonb,
          bank_info jsonb,
          performance_rating numeric default 0,
          shift text,
          address text,
          emergency_contact jsonb,
          created_at timestamp with time zone default timezone('utc'::text, now()) not null,
          updated_at timestamp with time zone default timezone('utc'::text, now()) not null
        );

        -- Add RLS policies
        alter table public.staff_members enable row level security;
        
        -- Allow authenticated users to read all staff members
        create policy "Allow authenticated users to read staff_members"
        on public.staff_members for select
        to authenticated
        using (true);

        -- Allow authenticated users to insert staff members
        create policy "Allow authenticated users to insert staff_members"
        on public.staff_members for insert
        to authenticated
        with check (true);

        -- Allow authenticated users to update their own staff members
        create policy "Allow authenticated users to update staff_members"
        on public.staff_members for update
        to authenticated
        using (true);
      end if;
    end;
    $$;
  `;

  const { error } = await supabase.rpc('check_and_create_staff_table');
  if (error) {
    console.error('Error creating check_and_create_staff_table function:', error);
    throw error;
  }
};

// Initialize the table
createTableFunction().catch(console.error);
